/**
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MultipleSignersSigningCeremonyRequest from '../model/MultipleSignersSigningCeremonyRequest';
import MultipleSignersSigningCeremonyResponse from '../model/MultipleSignersSigningCeremonyResponse';
import SigningCeremonyV2Request from '../model/SigningCeremonyV2Request';
import SigningCeremonyV2Response from '../model/SigningCeremonyV2Response';

/**
* SigningCeremony service.
* @module api/SigningCeremonyApi
* @version 1.0.1
*/
export default class SigningCeremonyApi {

    /**
    * Constructs a new SigningCeremonyApi. 
    * @alias module:api/SigningCeremonyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Multiple Signers Signing Ceremony
     * #### Used when there are multiple signers on a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/MultipleSignersSigningCeremonyRequest} opts.multipleSignersSigningCeremonyRequest ##### Multiple Signers Signing Ceremony Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MultipleSignersSigningCeremonyResponse} and HTTP response
     */
    postMultipleSignersSigningCeremonyWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['multipleSignersSigningCeremonyRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postMultipleSignersSigningCeremony");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MultipleSignersSigningCeremonyResponse;
      return this.apiClient.callApi(
        '/MultipleSignersSigningCeremony', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Multiple Signers Signing Ceremony
     * #### Used when there are multiple signers on a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/MultipleSignersSigningCeremonyRequest} opts.multipleSignersSigningCeremonyRequest ##### Multiple Signers Signing Ceremony Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MultipleSignersSigningCeremonyResponse}
     */
    postMultipleSignersSigningCeremony(contentType, opts) {
      return this.postMultipleSignersSigningCeremonyWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Signing Ceremony V2
     * #### Used to initiate the signing process of a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/SigningCeremonyV2Request} opts.signingCeremonyV2Request ##### Signing Ceremony V2 Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SigningCeremonyV2Response} and HTTP response
     */
    postSigningCeremonyV2WithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['signingCeremonyV2Request'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postSigningCeremonyV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SigningCeremonyV2Response;
      return this.apiClient.callApi(
        '/SigningCeremonyV2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Signing Ceremony V2
     * #### Used to initiate the signing process of a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/SigningCeremonyV2Request} opts.signingCeremonyV2Request ##### Signing Ceremony V2 Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SigningCeremonyV2Response}
     */
    postSigningCeremonyV2(contentType, opts) {
      return this.postSigningCeremonyV2WithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
