/**
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoginRequest from '../model/LoginRequest';
import LoginResponse from '../model/LoginResponse';
import LogoutRequest from '../model/LogoutRequest';
import LogoutResponse from '../model/LogoutResponse';
import TokenExtendRequest from '../model/TokenExtendRequest';
import TokenExtendResponse from '../model/TokenExtendResponse';
import TokenValidateRequest from '../model/TokenValidateRequest';
import TokenValidateResponse from '../model/TokenValidateResponse';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 1.0.1
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Login
     * #### Generates a API Token for the User
     * @param {String} contentType 
     * @param {module:model/LoginRequest} loginRequest ##### Login Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoginResponse} and HTTP response
     */
    loginWithHttpInfo(contentType, loginRequest) {
      let postBody = loginRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling login");
      }
      // verify the required parameter 'loginRequest' is set
      if (loginRequest === undefined || loginRequest === null) {
        throw new Error("Missing the required parameter 'loginRequest' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginResponse;
      return this.apiClient.callApi(
        '/Login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Login
     * #### Generates a API Token for the User
     * @param {String} contentType 
     * @param {module:model/LoginRequest} loginRequest ##### Login Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoginResponse}
     */
    login(contentType, loginRequest) {
      return this.loginWithHttpInfo(contentType, loginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Logout
     * #### Used to log out a user from SigniFlow.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/LogoutRequest} opts.logoutRequest ##### Logout Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogoutResponse} and HTTP response
     */
    postLogoutWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['logoutRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postLogout");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogoutResponse;
      return this.apiClient.callApi(
        '/Logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Logout
     * #### Used to log out a user from SigniFlow.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/LogoutRequest} opts.logoutRequest ##### Logout Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogoutResponse}
     */
    postLogout(contentType, opts) {
      return this.postLogoutWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Token Extend
     * #### Used to extend the period of time in which the session token is valid.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenExtendRequest} opts.tokenExtendRequest ##### Token Extend Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenExtendResponse} and HTTP response
     */
    postTokenExtendWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['tokenExtendRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postTokenExtend");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenExtendResponse;
      return this.apiClient.callApi(
        '/TokenExtend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Token Extend
     * #### Used to extend the period of time in which the session token is valid.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenExtendRequest} opts.tokenExtendRequest ##### Token Extend Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenExtendResponse}
     */
    postTokenExtend(contentType, opts) {
      return this.postTokenExtendWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Token Validate
     * #### Used to validate the user's session token.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenValidateRequest} opts.tokenValidateRequest ##### Token Validate Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenValidateResponse} and HTTP response
     */
    postTokenValidateWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['tokenValidateRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postTokenValidate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenValidateResponse;
      return this.apiClient.callApi(
        '/TokenValidate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Token Validate
     * #### Used to validate the user's session token.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenValidateRequest} opts.tokenValidateRequest ##### Token Validate Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenValidateResponse}
     */
    postTokenValidate(contentType, opts) {
      return this.postTokenValidateWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
