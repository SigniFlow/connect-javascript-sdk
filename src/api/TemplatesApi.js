/**
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplyPrepperTemplateRequest from '../model/ApplyPrepperTemplateRequest';
import ApplyPrepperTemplateResponse from '../model/ApplyPrepperTemplateResponse';
import GetDocumentTagFieldBoxPositionRequest from '../model/GetDocumentTagFieldBoxPositionRequest';
import GetDocumentTagFieldBoxPositionResponse from '../model/GetDocumentTagFieldBoxPositionResponse';
import GetDocumentTagFieldPositionRequest from '../model/GetDocumentTagFieldPositionRequest';
import GetDocumentTagFieldPositionResponse from '../model/GetDocumentTagFieldPositionResponse';
import GetPrepperTemplateListRequest from '../model/GetPrepperTemplateListRequest';
import GetPrepperTemplateListResponse from '../model/GetPrepperTemplateListResponse';
import GetPrepperTemplateRequest from '../model/GetPrepperTemplateRequest';
import GetPrepperTemplateResponse from '../model/GetPrepperTemplateResponse';

/**
* Templates service.
* @module api/TemplatesApi
* @version 1.0.1
*/
export default class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Apply a Prepper template
     * #### Used when applying a templaet to a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/ApplyPrepperTemplateRequest} opts.applyPrepperTemplateRequest ##### Apply A Prepper Template Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplyPrepperTemplateResponse} and HTTP response
     */
    postApplyPrepperTemplateWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['applyPrepperTemplateRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postApplyPrepperTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplyPrepperTemplateResponse;
      return this.apiClient.callApi(
        '/ApplyPrepperTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Apply a Prepper template
     * #### Used when applying a templaet to a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/ApplyPrepperTemplateRequest} opts.applyPrepperTemplateRequest ##### Apply A Prepper Template Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplyPrepperTemplateResponse}
     */
    postApplyPrepperTemplate(contentType, opts) {
      return this.postApplyPrepperTemplateWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Document Tag Field Box Position
     * #### Used to get the tag field box position on a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocumentTagFieldBoxPositionRequest} opts.getDocumentTagFieldBoxPositionRequest ##### Get Document Tag Field Box Position Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetDocumentTagFieldBoxPositionResponse} and HTTP response
     */
    postGetDocumentTagFieldBoxPositionWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['getDocumentTagFieldBoxPositionRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postGetDocumentTagFieldBoxPosition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDocumentTagFieldBoxPositionResponse;
      return this.apiClient.callApi(
        '/GetDocumentTagFieldBoxPosition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Document Tag Field Box Position
     * #### Used to get the tag field box position on a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocumentTagFieldBoxPositionRequest} opts.getDocumentTagFieldBoxPositionRequest ##### Get Document Tag Field Box Position Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetDocumentTagFieldBoxPositionResponse}
     */
    postGetDocumentTagFieldBoxPosition(contentType, opts) {
      return this.postGetDocumentTagFieldBoxPositionWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Document Tag Field Position
     * #### Used to get the tag position on a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocumentTagFieldPositionRequest} opts.getDocumentTagFieldPositionRequest ##### Get Document Tag Field Position Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetDocumentTagFieldPositionResponse} and HTTP response
     */
    postGetDocumentTagFieldPositionWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['getDocumentTagFieldPositionRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postGetDocumentTagFieldPosition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDocumentTagFieldPositionResponse;
      return this.apiClient.callApi(
        '/GetDocumentTagFieldPosition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Document Tag Field Position
     * #### Used to get the tag position on a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocumentTagFieldPositionRequest} opts.getDocumentTagFieldPositionRequest ##### Get Document Tag Field Position Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetDocumentTagFieldPositionResponse}
     */
    postGetDocumentTagFieldPosition(contentType, opts) {
      return this.postGetDocumentTagFieldPositionWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Prepper Template
     * #### Used to get a document template.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetPrepperTemplateRequest} opts.getPrepperTemplateRequest ##### Get Prepper Template Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetPrepperTemplateResponse} and HTTP response
     */
    postGetPrepperTemplateWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['getPrepperTemplateRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postGetPrepperTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPrepperTemplateResponse;
      return this.apiClient.callApi(
        '/GetPrepperTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Prepper Template
     * #### Used to get a document template.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetPrepperTemplateRequest} opts.getPrepperTemplateRequest ##### Get Prepper Template Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetPrepperTemplateResponse}
     */
    postGetPrepperTemplate(contentType, opts) {
      return this.postGetPrepperTemplateWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Prepper Template List
     * #### Used to get a list of document templates.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetPrepperTemplateListRequest} opts.getPrepperTemplateListRequest ##### Get Prepper Template List Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetPrepperTemplateListResponse} and HTTP response
     */
    postGetPrepperTemplateListWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['getPrepperTemplateListRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postGetPrepperTemplateList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPrepperTemplateListResponse;
      return this.apiClient.callApi(
        '/GetPrepperTemplateList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Prepper Template List
     * #### Used to get a list of document templates.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetPrepperTemplateListRequest} opts.getPrepperTemplateListRequest ##### Get Prepper Template List Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetPrepperTemplateListResponse}
     */
    postGetPrepperTemplateList(contentType, opts) {
      return this.postGetPrepperTemplateListWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
