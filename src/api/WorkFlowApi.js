/**
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddWokflowStepV2Response from '../model/AddWokflowStepV2Response';
import AddWorkflowStepV2Request from '../model/AddWorkflowStepV2Request';
import CancelFlowRequest from '../model/CancelFlowRequest';
import CancelFlowResponse from '../model/CancelFlowResponse';
import CreateWorkflowRequest from '../model/CreateWorkflowRequest';
import CreateWorkflowResponse from '../model/CreateWorkflowResponse';
import DeleteDocRequest from '../model/DeleteDocRequest';
import DeleteDocResponse from '../model/DeleteDocResponse';
import DocPrepperAddAdvancedFieldsRequest from '../model/DocPrepperAddAdvancedFieldsRequest';
import DocPrepperAddAdvancedFieldsResponse from '../model/DocPrepperAddAdvancedFieldsResponse';
import DocPrepperAddFieldsFlowIDRequest from '../model/DocPrepperAddFieldsFlowIDRequest';
import DocPrepperAddFieldsFlowIDResponse from '../model/DocPrepperAddFieldsFlowIDResponse';
import FullWorkflowRequest from '../model/FullWorkflowRequest';
import FullWorkflowResponse from '../model/FullWorkflowResponse';
import GetDocStatusRequest from '../model/GetDocStatusRequest';
import GetDocStatusResponse from '../model/GetDocStatusResponse';
import GetDocumentRequest from '../model/GetDocumentRequest';
import GetDocumentResponse from '../model/GetDocumentResponse';
import InitiateFlowNoEmailRequest from '../model/InitiateFlowNoEmailRequest';
import InitiateFlowNoEmailResponse from '../model/InitiateFlowNoEmailResponse';
import InitiateFlowNoInitialEmailRequest from '../model/InitiateFlowNoInitialEmailRequest';
import InitiateFlowNoInitialEmailResponse from '../model/InitiateFlowNoInitialEmailResponse';
import InitiateFlowRequest from '../model/InitiateFlowRequest';
import InitiateFlowResponse from '../model/InitiateFlowResponse';
import WorkflowSignRequest from '../model/WorkflowSignRequest';
import WorkflowSignResponse from '../model/WorkflowSignResponse';

/**
* WorkFlow service.
* @module api/WorkFlowApi
* @version 1.0.1
*/
export default class WorkFlowApi {

    /**
    * Constructs a new WorkFlowApi. 
    * @alias module:api/WorkFlowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Workflow
     * #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
     * @param {String} contentType 
     * @param {module:model/CreateWorkflowRequest} createWorkflowRequest ##### Create Workflow Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateWorkflowResponse} and HTTP response
     */
    createWorkflowWithHttpInfo(contentType, createWorkflowRequest) {
      let postBody = createWorkflowRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createWorkflow");
      }
      // verify the required parameter 'createWorkflowRequest' is set
      if (createWorkflowRequest === undefined || createWorkflowRequest === null) {
        throw new Error("Missing the required parameter 'createWorkflowRequest' when calling createWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorkflowResponse;
      return this.apiClient.callApi(
        '/CreateWorkflow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Workflow
     * #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
     * @param {String} contentType 
     * @param {module:model/CreateWorkflowRequest} createWorkflowRequest ##### Create Workflow Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateWorkflowResponse}
     */
    createWorkflow(contentType, createWorkflowRequest) {
      return this.createWorkflowWithHttpInfo(contentType, createWorkflowRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Document
     * #### Used to download a document from SigniFlow.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocumentRequest} opts.getDocumentRequest ##### Get Document Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetDocumentResponse} and HTTP response
     */
    getDocumentWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['getDocumentRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getDocument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDocumentResponse;
      return this.apiClient.callApi(
        '/GetDoc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Document
     * #### Used to download a document from SigniFlow.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocumentRequest} opts.getDocumentRequest ##### Get Document Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetDocumentResponse}
     */
    getDocument(contentType, opts) {
      return this.getDocumentWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a Workflow step
     * #### Used to add a step to a document Workflow process.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/AddWorkflowStepV2Request} opts.addWorkflowStepV2Request ##### Add A Workflow Step Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddWokflowStepV2Response} and HTTP response
     */
    postAddWorkflowStepWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['addWorkflowStepV2Request'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postAddWorkflowStep");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddWokflowStepV2Response;
      return this.apiClient.callApi(
        '/AddWorkflowStepV2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a Workflow step
     * #### Used to add a step to a document Workflow process.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/AddWorkflowStepV2Request} opts.addWorkflowStepV2Request ##### Add A Workflow Step Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddWokflowStepV2Response}
     */
    postAddWorkflowStep(contentType, opts) {
      return this.postAddWorkflowStepWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel Flow
     * #### Used to cancel a document workflow.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelFlowRequest} opts.cancelFlowRequest ##### Cancel Flow Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CancelFlowResponse} and HTTP response
     */
    postCancelFlowWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['cancelFlowRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postCancelFlow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelFlowResponse;
      return this.apiClient.callApi(
        '/CancelFlow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel Flow
     * #### Used to cancel a document workflow.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelFlowRequest} opts.cancelFlowRequest ##### Cancel Flow Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CancelFlowResponse}
     */
    postCancelFlow(contentType, opts) {
      return this.postCancelFlowWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Document
     * #### This is used to delete a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteDocRequest} opts.deleteDocRequest ##### Delete Document Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteDocResponse} and HTTP response
     */
    postDeleteDocWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['deleteDocRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postDeleteDoc");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteDocResponse;
      return this.apiClient.callApi(
        '/DeleteDoc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Document
     * #### This is used to delete a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteDocRequest} opts.deleteDocRequest ##### Delete Document Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteDocResponse}
     */
    postDeleteDoc(contentType, opts) {
      return this.postDeleteDocWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Document Prepper Add Fields
     * #### Used to add fields to a document using the user's FlowID.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/DocPrepperAddFieldsFlowIDRequest} opts.docPrepperAddFieldsFlowIDRequest ##### Document Prepper Add Fields Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocPrepperAddFieldsFlowIDResponse} and HTTP response
     */
    postDocPrepperAddFieldWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['docPrepperAddFieldsFlowIDRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postDocPrepperAddField");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocPrepperAddFieldsFlowIDResponse;
      return this.apiClient.callApi(
        '/DocPrepperAddFieldsFlowID', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Document Prepper Add Fields
     * #### Used to add fields to a document using the user's FlowID.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/DocPrepperAddFieldsFlowIDRequest} opts.docPrepperAddFieldsFlowIDRequest ##### Document Prepper Add Fields Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocPrepperAddFieldsFlowIDResponse}
     */
    postDocPrepperAddField(contentType, opts) {
      return this.postDocPrepperAddFieldWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Document Prepper Add Advanced Fields
     * #### Used to add advanced fields to a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/DocPrepperAddAdvancedFieldsRequest} opts.docPrepperAddAdvancedFieldsRequest ##### Document Prepper Add Advanced Fields Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocPrepperAddAdvancedFieldsResponse} and HTTP response
     */
    postDocPrepperAdvancedFieldsWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['docPrepperAddAdvancedFieldsRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postDocPrepperAdvancedFields");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocPrepperAddAdvancedFieldsResponse;
      return this.apiClient.callApi(
        '/DocPrepperAdvancedFields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Document Prepper Add Advanced Fields
     * #### Used to add advanced fields to a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/DocPrepperAddAdvancedFieldsRequest} opts.docPrepperAddAdvancedFieldsRequest ##### Document Prepper Add Advanced Fields Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocPrepperAddAdvancedFieldsResponse}
     */
    postDocPrepperAdvancedFields(contentType, opts) {
      return this.postDocPrepperAdvancedFieldsWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * FullWorkflow
     * #### Used to create a fullworkflow for a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/FullWorkflowRequest} opts.fullWorkflowRequest ##### FullWorkflow Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FullWorkflowResponse} and HTTP response
     */
    postFullWorkflowWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['fullWorkflowRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postFullWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FullWorkflowResponse;
      return this.apiClient.callApi(
        '/FullWorkflow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * FullWorkflow
     * #### Used to create a fullworkflow for a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/FullWorkflowRequest} opts.fullWorkflowRequest ##### FullWorkflow Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FullWorkflowResponse}
     */
    postFullWorkflow(contentType, opts) {
      return this.postFullWorkflowWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Document Status
     * #### Used to get the status of the document ex. pending/completed/rejected.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocStatusRequest} opts.getDocStatusRequest ##### Get Document Status Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetDocStatusResponse} and HTTP response
     */
    postGetDocStatusWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['getDocStatusRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postGetDocStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDocStatusResponse;
      return this.apiClient.callApi(
        '/GetDocStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Document Status
     * #### Used to get the status of the document ex. pending/completed/rejected.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocStatusRequest} opts.getDocStatusRequest ##### Get Document Status Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetDocStatusResponse}
     */
    postGetDocStatus(contentType, opts) {
      return this.postGetDocStatusWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Initiate Flow
     * #### Used to initiate aworkflow of a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/InitiateFlowRequest} opts.initiateFlowRequest ##### Initiate Flow Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InitiateFlowResponse} and HTTP response
     */
    postInitiateFlowWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['initiateFlowRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postInitiateFlow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InitiateFlowResponse;
      return this.apiClient.callApi(
        '/InitiateFlow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Initiate Flow
     * #### Used to initiate aworkflow of a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/InitiateFlowRequest} opts.initiateFlowRequest ##### Initiate Flow Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InitiateFlowResponse}
     */
    postInitiateFlow(contentType, opts) {
      return this.postInitiateFlowWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Initiate Flow No Email
     * #### Used to initiate a workflow without sending out emails.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/InitiateFlowNoEmailRequest} opts.initiateFlowNoEmailRequest ##### Initiate Flow No Email Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InitiateFlowNoEmailResponse} and HTTP response
     */
    postInitiateFlowNoEmailWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['initiateFlowNoEmailRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postInitiateFlowNoEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InitiateFlowNoEmailResponse;
      return this.apiClient.callApi(
        '/InitiateFlow_No_Email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Initiate Flow No Email
     * #### Used to initiate a workflow without sending out emails.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/InitiateFlowNoEmailRequest} opts.initiateFlowNoEmailRequest ##### Initiate Flow No Email Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InitiateFlowNoEmailResponse}
     */
    postInitiateFlowNoEmail(contentType, opts) {
      return this.postInitiateFlowNoEmailWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Initiate Flow No Initial Email
     * #### Used to initiate a document workflow without an initial email being sent to the user.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/InitiateFlowNoInitialEmailRequest} opts.initiateFlowNoInitialEmailRequest ##### Initiate Flow No Initial Email Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InitiateFlowNoInitialEmailResponse} and HTTP response
     */
    postInitiateFlowNoInitialEmailWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['initiateFlowNoInitialEmailRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postInitiateFlowNoInitialEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InitiateFlowNoInitialEmailResponse;
      return this.apiClient.callApi(
        '/InitiateFlow_No_Initial_Email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Initiate Flow No Initial Email
     * #### Used to initiate a document workflow without an initial email being sent to the user.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/InitiateFlowNoInitialEmailRequest} opts.initiateFlowNoInitialEmailRequest ##### Initiate Flow No Initial Email Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InitiateFlowNoInitialEmailResponse}
     */
    postInitiateFlowNoInitialEmail(contentType, opts) {
      return this.postInitiateFlowNoInitialEmailWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Workflow Sign
     * #### Used to send a request to a user to sign a document workflow.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowSignRequest} opts.workflowSignRequest ##### Workflow Sign Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkflowSignResponse} and HTTP response
     */
    postWorkflowSignWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['workflowSignRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postWorkflowSign");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowSignResponse;
      return this.apiClient.callApi(
        '/WorkflowSign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Workflow Sign
     * #### Used to send a request to a user to sign a document workflow.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowSignRequest} opts.workflowSignRequest ##### Workflow Sign Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkflowSignResponse}
     */
    postWorkflowSign(contentType, opts) {
      return this.postWorkflowSignWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
