/**
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePortfolioRequest from '../model/CreatePortfolioRequest';
import CreatePortfolioResponse from '../model/CreatePortfolioResponse';
import DownloadPortfolioRequest from '../model/DownloadPortfolioRequest';
import DownloadPortfolioResponse from '../model/DownloadPortfolioResponse';
import LinkToPortfolioRequest from '../model/LinkToPortfolioRequest';
import LinkToPortfolioResponse from '../model/LinkToPortfolioResponse';
import SetDocumentOrderRequest from '../model/SetDocumentOrderRequest';
import SetDocumentOrderResponse from '../model/SetDocumentOrderResponse';
import SharePortfolioNoEmailRequest from '../model/SharePortfolioNoEmailRequest';
import SharePortfolioNoEmailResponse from '../model/SharePortfolioNoEmailResponse';
import SharePortfolioRequest from '../model/SharePortfolioRequest';
import SharePortfolioResponse from '../model/SharePortfolioResponse';

/**
* Portfolios service.
* @module api/PortfoliosApi
* @version 1.0.1
*/
export default class PortfoliosApi {

    /**
    * Constructs a new PortfoliosApi. 
    * @alias module:api/PortfoliosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Portfolio
     * #### Used to create a portfolio to group documents.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePortfolioRequest} opts.createPortfolioRequest ##### Create Portfolio Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePortfolioResponse} and HTTP response
     */
    postCreatePortfolioWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['createPortfolioRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postCreatePortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePortfolioResponse;
      return this.apiClient.callApi(
        '/CreatePortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Portfolio
     * #### Used to create a portfolio to group documents.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePortfolioRequest} opts.createPortfolioRequest ##### Create Portfolio Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePortfolioResponse}
     */
    postCreatePortfolio(contentType, opts) {
      return this.postCreatePortfolioWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download Portfolio
     * #### Used to return a string that is then used to download a portfolio.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/DownloadPortfolioRequest} opts.downloadPortfolioRequest ##### Download Portfolio Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DownloadPortfolioResponse} and HTTP response
     */
    postDownloadPortfolioWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['downloadPortfolioRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postDownloadPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DownloadPortfolioResponse;
      return this.apiClient.callApi(
        '/DownloadPortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download Portfolio
     * #### Used to return a string that is then used to download a portfolio.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/DownloadPortfolioRequest} opts.downloadPortfolioRequest ##### Download Portfolio Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DownloadPortfolioResponse}
     */
    postDownloadPortfolio(contentType, opts) {
      return this.postDownloadPortfolioWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Link To Portfolio
     * #### Used to get the url link to a portfolio.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/LinkToPortfolioRequest} opts.linkToPortfolioRequest ##### Link To Portfolio Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LinkToPortfolioResponse} and HTTP response
     */
    postLinkToPortfolioWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['linkToPortfolioRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postLinkToPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkToPortfolioResponse;
      return this.apiClient.callApi(
        '/LinkToPortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Link To Portfolio
     * #### Used to get the url link to a portfolio.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/LinkToPortfolioRequest} opts.linkToPortfolioRequest ##### Link To Portfolio Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LinkToPortfolioResponse}
     */
    postLinkToPortfolio(contentType, opts) {
      return this.postLinkToPortfolioWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Document Order
     * #### Used to set the order of documents that needs to be signed.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/SetDocumentOrderRequest} opts.setDocumentOrderRequest ##### Set Document Order Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SetDocumentOrderResponse} and HTTP response
     */
    postSetDocumentOrderWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['setDocumentOrderRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postSetDocumentOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetDocumentOrderResponse;
      return this.apiClient.callApi(
        '/SetDocumentOrder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set Document Order
     * #### Used to set the order of documents that needs to be signed.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/SetDocumentOrderRequest} opts.setDocumentOrderRequest ##### Set Document Order Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SetDocumentOrderResponse}
     */
    postSetDocumentOrder(contentType, opts) {
      return this.postSetDocumentOrderWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Share Portfolio
     * #### Used when a user wants to share a portfolio with someone else.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/SharePortfolioRequest} opts.sharePortfolioRequest ##### Share Portfolio Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SharePortfolioResponse} and HTTP response
     */
    postSharePortfolioWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['sharePortfolioRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postSharePortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SharePortfolioResponse;
      return this.apiClient.callApi(
        '/SharePortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Share Portfolio
     * #### Used when a user wants to share a portfolio with someone else.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/SharePortfolioRequest} opts.sharePortfolioRequest ##### Share Portfolio Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SharePortfolioResponse}
     */
    postSharePortfolio(contentType, opts) {
      return this.postSharePortfolioWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Share Portfolio No Email
     * #### Used when a user wants to share a portfolio without sending out an email.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/SharePortfolioNoEmailRequest} opts.sharePortfolioNoEmailRequest ##### Share Portfolio No Email Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SharePortfolioNoEmailResponse} and HTTP response
     */
    postSharePortfolioNoEmailWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['sharePortfolioNoEmailRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postSharePortfolioNoEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SharePortfolioNoEmailResponse;
      return this.apiClient.callApi(
        '/SharePortfolio_No_Email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Share Portfolio No Email
     * #### Used when a user wants to share a portfolio without sending out an email.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/SharePortfolioNoEmailRequest} opts.sharePortfolioNoEmailRequest ##### Share Portfolio No Email Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SharePortfolioNoEmailResponse}
     */
    postSharePortfolioNoEmail(contentType, opts) {
      return this.postSharePortfolioNoEmailWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
