/**
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetDocLinkRequest from '../model/GetDocLinkRequest';
import GetDocLinkResponse from '../model/GetDocLinkResponse';
import GetDocumentPrepperLinkRequest from '../model/GetDocumentPrepperLinkRequest';
import GetDocumentPrepperLinkResponse from '../model/GetDocumentPrepperLinkResponse';

/**
* Viewers service.
* @module api/ViewersApi
* @version 1.0.1
*/
export default class ViewersApi {

    /**
    * Constructs a new ViewersApi. 
    * @alias module:api/ViewersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Document Link
     * #### Used to get the document link that will be used to sign a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocLinkRequest} opts.getDocLinkRequest ##### Get Document Link Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetDocLinkResponse} and HTTP response
     */
    postGetDocLinkWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['getDocLinkRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postGetDocLink");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDocLinkResponse;
      return this.apiClient.callApi(
        '/GetDocLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Document Link
     * #### Used to get the document link that will be used to sign a document.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocLinkRequest} opts.getDocLinkRequest ##### Get Document Link Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetDocLinkResponse}
     */
    postGetDocLink(contentType, opts) {
      return this.postGetDocLinkWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Document Prepper Link
     * #### Used to get a document prepper link (url).
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocumentPrepperLinkRequest} opts.getDocumentPrepperLinkRequest ##### Get Document Prepper Link Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetDocumentPrepperLinkResponse} and HTTP response
     */
    postGetDocumentPrepperLinkWithHttpInfo(contentType, opts) {
      opts = opts || {};
      let postBody = opts['getDocumentPrepperLinkRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postGetDocumentPrepperLink");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDocumentPrepperLinkResponse;
      return this.apiClient.callApi(
        '/GetDocumentPrepperLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Document Prepper Link
     * #### Used to get a document prepper link (url).
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDocumentPrepperLinkRequest} opts.getDocumentPrepperLinkRequest ##### Get Document Prepper Link Request Model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetDocumentPrepperLinkResponse}
     */
    postGetDocumentPrepperLink(contentType, opts) {
      return this.postGetDocumentPrepperLinkWithHttpInfo(contentType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
